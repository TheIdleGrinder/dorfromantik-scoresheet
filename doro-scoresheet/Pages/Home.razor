@page "/"

@using doro;

<PageTitle>Dorfromantik Score Sheet</PageTitle>

<h1>Dorfromantik Punktezähler</h1>

<fieldset id="feature-selector">
    <legend>Erweiterungen</legend>

    @foreach (var expansion in expansions)
    {
        <div>
            <input type="checkbox" id="expansion-@expansion.Id"
                   name="@expansion.Id"
                   checked="@game.HasPack(expansion.Id)"
                   @onchange="() => ToggleExpansion(expansion.Id)" />
            <label for="@expansion.Id">@expansion.Name</label>
        </div>
    }
</fieldset>

@foreach (string category in game.GetCategories())
{
    <h3>@game.GetCategoryName(category)</h3>
    @foreach (GoalPack pack in game.GoalPacks.Where(p => p.HasCategory(category)))
    {
        <div class="input-group">
        <h5>@pack.Name</h5>
        @foreach (Goal goal in pack.GetCategory(category).Goals)
        {
            string inputId = $"{pack.Id}-{category}-{goal.Id}";
            <div class="goal-score-input">
                <label for="@inputId">@goal.Name</label>
                <input type="number" id="@inputId" 
                    min="@goal.Minimum" max="@goal.Maximum" step="@goal.Step"
                    @bind-value="scoreSheet[pack.Id, category, goal.Id]" />
            </div>
        }
        </div>
    }
    <h5>Summe @(game.GetCategoryName(category)): @scoreSheet.GetCategoryScore(game, category)</h5>
}

<hr />

@foreach (string category in game.GetCategories())
{
    <h5>@game.GetCategoryName(category): @scoreSheet.GetCategoryScore(game, category)</h5>
}
<h4>Gesamt: @scoreSheet.GetTotalScore(game)</h4>

<style>
    #feature-selector {
        margin: 1em;
        padding: 1em;
        border: 1px solid gray;
    }

    label {
        display: inline-block;
        width: 150px;
    }

    input[type=number] {
        width: 100px;
    }

    div.input-group {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 0.5em;
    }

    div.goal-score-input {
        margin-top: 1px;
        margin-bottom: 1px;
    }
</style>

@code
{
    private ScoreTable scoreTable = new ScoreTable();

    private GameConfiguration game = GameFactory.GetBaseGame();
    private List<GoalPack> expansions = new() { GameFactory.GetMillGoals(), GameFactory.GetDuelGoals() };

    private ScoreSheet scoreSheet = new("Spieler");

    void ToggleExpansion(string expansionId)
    {
        var expansion = expansions.FirstOrDefault(e => e.Id == expansionId);
        if (expansion != null)
        {
            if (game.HasPack(expansion.Id))
            {
                game.RemovePack(expansion.Id);
            }
            else
            {
                game.AddPack(expansion);
            }
        }
    }
}