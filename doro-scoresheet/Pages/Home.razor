@page "/"

@using doro;

<PageTitle>Dorfromantik @Localization.Interface.ScoreSheet</PageTitle>

<h1>Dorfromantik @Localization.Interface.ScoreSheet</h1>

<fieldset id="feature-selector-box">
    <div id="feature-selector">
        <div id="games">
            <h4>@Localization.Interface.Games</h4>
            @foreach (var game in Games.GetAllGames())
            {
                <div style="width: fit-content">
                    <input type="radio" id="game-@game.Id" 
                        checked="@(game.Id == Definition.Id)"
                        @onchange="() => SetGame(game)"/>
                    <label for="game-@game.Id">@game.Name</label>
                </div>
            }
        </div>
        <div id="expansions">
            <h4>@Localization.Interface.Expansions</h4>
            @foreach (var expansion in Definition.ExpansionPacks)
            {
                <div>
                    <input type="checkbox" id="expansion-@expansion.Id"
                           name="@expansion.Id"
                           checked="@Game.HasPack(expansion.Id)"
                           @onchange="() => ToggleExpansion(expansion.Id)" />
                    <label for="expansion-@expansion.Id">@expansion.Name</label>
                </div>
            }
        </div>
    </div>
</fieldset>

@foreach (string category in Definition.GetAllCategoryIds())
{
    @if (Game.HasCategory(category))
    {
        <h3>@Game.GetCategoryName(category)</h3>
        var packs = Definition.GetAllPacks().Where(p => Game.HasPack(p.Id) && p.HasCategory(category)).ToList();
        @foreach (GoalPack pack in packs)
        {
            <div class="input-group">
                @if (packs.Count > 1)
                {
                    <h5>@pack.Name</h5>
                }
                @foreach (Goal goal in pack.GetCategory(category).Goals)
                {
                    string inputId = $"{pack.Id}-{category}-{goal.Id}";
                    <div class="goal-score-input">
                        <label for="@inputId-0">@goal.Name</label>
                        <div style="display:flex;flex-direction:column">
                            @for (int i = 0; i < Scores.Length; i++)
                            {
                                int index = i;
                                <input type="number" id="@inputId-@index" 
                                    class="@((Scores.Length == 1) ? "singlePlayer" : (index == 0) ? "redPlayer" : "bluePlayer")"
                                    min="@goal.Minimum" max="@goal.Maximum" step="@goal.Step" title="@goal.Description"
                                    @bind-value="Scores[index][pack.Id, category, goal.Id]" />
                            }
                        </div>
                    </div>
                }
            </div>
        }
        <h5>@Localization.Interface.CategoryScore @(Game.GetCategoryName(category)): @String.Join(" : ", Scores.Select(s => s.GetCategoryScore(Game, category)))</h5>
    }
}

<hr />

@foreach (string category in Game.GetCategories())
{
    <h5>@Localization.Interface.CategoryScore @(Game.GetCategoryName(category)): @String.Join(" : ", Scores.Select(s => s.GetCategoryScore(Game, category)))</h5>
}
<h4>@Localization.Interface.TotalScore: @String.Join(" : ", Scores.Select(s => s.GetTotalScore(Game)))</h4>

<style>
    #feature-selector-box {
        margin: 0.5em;
        padding: 0.5em;
        border: 1px solid gray;
    }

    #feature-selector {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    #games, #expansions {

    }

    label {
        display: inline-block;
        width: 150px;
    }

    input[type=number] {
        width: 100px;
    }

    input.singlePlayer {

    }

    input.redPlayer {
        background-color: lightcoral;
        border: 1px solid darkred;
        border-radius: 3px;
    }

    input.bluePlayer {
        margin-top: 2px;
        background-color: lightblue;
        border: 1px solid darkblue;
        border-radius: 3px;
    }

    div.input-group {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 0.5em;
    }

    div.goal-score-input {
        margin-top: 2px;
        margin-bottom: 2px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        flex-wrap: wrap;
    }
</style>

@code
{
    public Home()
    {
        SetGame(Games.GetAllGames().First());
    }

    private GameConfiguration Game;

    private GameDefinition Definition;

    private ScoreSheet[] Scores;

    void SetGame(GameDefinition gameDefinition)
    {
        Definition = gameDefinition;
        Game = gameDefinition.GetBaseConfiguration();

        int players = Math.Clamp(Definition.Players, 1, 2); // limit to 2 players for now
        List<string> playerNames = (players == 1) 
            ? new List<string> { "Spieler" } 
            : new List<string> { "Rot", "Blau" };
        Scores = playerNames.Select(p => new ScoreSheet(p)).ToArray();
    }

    void ToggleExpansion(string expansionId)
    {
        var expansion = Definition.ExpansionPacks.FirstOrDefault(e => e.Id == expansionId);
        if (expansion != null)
        {
            if (Game.HasPack(expansion.Id))
            {
                Game.RemovePack(expansion.Id);
            }
            else
            {
                Game.AddPack(expansion);
            }
        }
    }
}